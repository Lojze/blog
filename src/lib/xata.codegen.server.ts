// Generated by Xata Codegen 0.27.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
    BaseClientOptions,
    SchemaInference,
    XataRecord,
} from "@xata.io/client";

const tables = [
    {
        name: "historyRecord",
        columns: [
            { name: "title", type: "string" },
            { name: "question", type: "text" },
            { name: "association", type: "string" },
            { name: "description", type: "string" },
            { name: "createTime", type: "datetime" },
        ],
    },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type HistoryRecord = InferredTypes["historyRecord"];
export type HistoryRecordRecord = HistoryRecord & XataRecord;

export type DatabaseSchema = {
    historyRecord: HistoryRecordRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
    databaseURL: "https://Mai-Da-s-workspace-lgaksp.us-east-1.xata.sh/db/aiIdeas",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
    constructor(options?: BaseClientOptions) {
        super({ ...defaultOptions, ...options }, tables);
    }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
    if (instance) return instance;

    instance = new XataClient();
    return instance;
};
